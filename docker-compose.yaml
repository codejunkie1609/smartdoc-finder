# This configuration uses a .env file for sensitive data and user-specific paths.
# Ensure you have a .env file in the same directory.

services:
  # --- Frontend Web Interface (React/Next.js) ---
  frontend:
    build:
      context: ./smartdoc-finder-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8080
    depends_on:
      - backend

  # --- Backend API & Orchestrator (Java/Spring) ---
  backend:
    build:
      context: ./smartdoc-finder-backend
    ports:
      - "8080:8080"
      - "5005:5005" # Java Debug Port
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/${POSTGRES_DB}"
      SPRING_DATASOURCE_USERNAME: "${POSTGRES_USER}"
      SPRING_DATASOURCE_PASSWORD: "${POSTGRES_PASSWORD}"
      INDEXING_SOURCE_PATH: "/host-documents"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      # âœ… CORRECTED: URLs now point to the internal container ports (8000)
      SPRING_APPLICATION_JSON: '{"embedding.service.url": "http://embedding-api:8000", "generator.service.url": "http://generator:8000", "reranker.service.url": "http://reranker:8000"}'
    volumes:
      - lucene_index:/lucene-index
      - ${USER_DATA_DIRECTORY}:/host-documents
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      generator:
        condition: service_started # Changed to started to avoid healthcheck issues
      reranker:
        condition: service_started # Changed to started to avoid healthcheck issues

  # --- Embedding API (Python/FastAPI) ---
  embedding-api:
    build:
      context: ./smartdoc-finder-embedding
    ports:
      - "8001:8000" # Changed host port to avoid conflict
    environment:
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - faiss_index:/app/index
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      - rabbitmq

  # --- Embedding Worker (Python/FAISS) ---
  embedding-worker:
    build:
      context: ./smartdoc-finder-embedding
    environment:
      - RABBITMQ_HOST=rabbitmq
    volumes:
      - faiss_index:/app/index
    command: python -u build_faiss_index.py
    depends_on:
      - rabbitmq

  # --- Reranker Service (Python/FastAPI) ---
  reranker:
    build:
      context: ./smartdoc-finder-reranker
    ports:
      - "9001:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000

  # --- Generator Service (Python/FastAPI) ---
  generator:
    build:
      context: ./smartdoc-finder-generator
    ports:
      - "9000:8000"
      - "5679:5678"
    command: python -m uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      - ollama

  # --- Ollama LLM Service ---
  ollama:
    build:
      context: ./smartdoc-finder-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped

  # --- PostgreSQL Database ---
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- RabbitMQ Message Broker ---
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# --- Define Named Volumes for Data Persistence ---
volumes:
  db_data:
  lucene_index:
  faiss_index:
  ollama_data:
